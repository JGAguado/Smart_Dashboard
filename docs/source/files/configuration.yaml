substitutions:
  device_name: "smart-dashboard"
  friendly_name: "Smart Dashboard"
  project_name: "smart.dashboard"
  project_version: "1.0"
  ap_ssid: "Smart-Dashboard"
  ap_pwd: "smartdashboard"

esphome:
  name: "${device_name}"
  name_add_mac_suffix: true
  includes:
    - libraries/MAX17048.h
  libraries:
    - "Wire"
    - "SPI"
  project:
    name: "${project_name}"
    version: "${project_version}"
  # Initialize the IIC bus immediatelly after the powering the sensors
  on_boot:
    priority: 600
    then:
     - lambda: |-
        Wire.begin();
        delay(100);

     - script.execute: consider_deep_sleep

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable Over The Air updates
ota:


#Public location of this yaml file
dashboard_import:
  package_import_url: github://JGAguado/Smart_Dashboard/docs/source/files/configuration.yaml
  import_full_config: false

# Enable fallback hotspot (captive portal) in case wifi connection fails
captive_portal:

improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "${ap_ssid}"
    password: "${ap_pwd}"


i2c:
  scl: GPIO34
  sda: GPIO33
  scan: false
  id: bus_a
  frequency: 50kHz

spi:
  clk_pin:  GPIO36
  miso_pin: GPIO35


font:
  - file: "gfonts://Audiowide"
    id: font_title
    size: 20

switch:
  - platform: gpio
    pin: GPIO13
    id: exc
    name: "Excitation switch"
    icon: "mdi:power"
    restore_mode: ALWAYS_ON  
    
    
sensor:    
  # Battery level sensor  
  - platform: custom
    lambda: |-
      auto max17048_sensor = new MAX17048Sensor();
      App.register_component(max17048_sensor);
      return {max17048_sensor->voltage_sensor, max17048_sensor->percentage_sensor};
    sensors:
      - name: "Bat. voltage"
        unit_of_measurement: V
        accuracy_decimals: 2
        id: batvoltage

      - name: "Battery"
        id: battery
        icon: "mdi:battery"
        unit_of_measurement: '%'

  # Temperature - Air pressure 
  - platform: bmp280
    temperature:
      name: "Internal Temperature"
      oversampling: 16x
    pressure:
      name: "Absolute Pressure"
    address: 0x77
    i2c_id: bus_a

  # WiFi Signal     
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 20s

image:
  - file: "images/Screenshot bw.png"
    id: screenshot

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO8
    dc_pin: GPIO7
    busy_pin: 
      number: GPIO5
      inverted: true
    reset_pin: GPIO6
    model: 7.50inV2alt
    reset_duration: 2ms
    update_interval: never
    auto_clear_enabled: false
    lambda: |-
      it.image(0, 0, id(screenshot));

deep_sleep:
  id: deep_sleep_control
  # run_duration: 5s
  sleep_duration: 1h

script:
  - id: consider_deep_sleep
    mode: queued
    then:
      - delay: 5s
      - component.update: my_display   
      - delay: 5s           
      - if:
          condition:
            sensor.in_range:
              id: batvoltage
              above: 4.15
          then:
            - deep_sleep.prevent: deep_sleep_control 
          else:
            - deep_sleep.enter: deep_sleep_control 

      - delay: 25s
      - script.execute: consider_deep_sleep          


